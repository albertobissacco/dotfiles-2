# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# remap atom-ternjs keybnidings to match symbols-view bindings
'.platform-darwin atom-workspace':
  'ctrl-shift-r': 'unset!'
  'cmd-shift-R': 'tern:references'
  'ctrl-alt-d': 'unset!'
  'alt-cmd-down': 'tern:definition'
  'ctrl-alt-z': 'unset!'
  'alt-cmd-up': 'tern:markerCheckpointBack'

# Toggle block comment and unset default bindings
'.platform-darwin atom-text-editor':
  'cmd-?': 'block-comment:toggle'
  'ctrl-alt-cmd-/': 'unset!'
  'ctrl-?': 'unset!'

# Toggle linter results
'.platform-darwin atom-text-editor':
  'alt-cmd-l': 'linter:toggle'

# Save all, Save as shortcuts
'.platform-darwin atom-workspace':
  'cmd-shift-s': 'window:save-all'
  'cmd-alt-s': 'core:save-as'

# Tree View additional shortcuts
'.platform-darwin .tree-view':
  'r': 'tree-view:rename'

# Override difftool bindings to add more specifity
'.platform-darwin atom-workspace, .platform-darwin atom-text-editor':
  'ctrl-shift-D': 'git-difftool:diff-file'
