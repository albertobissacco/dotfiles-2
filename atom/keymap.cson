# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'atom-text-editor:not([mini])':
  'shift-cmd-delete': 'editor:delete-line'

'atom-text-editor':
  'shift-cmd-U': 'unset!'
  'alt-shift-cmd-U': 'unset!'
  'shift-cmd-H': 'unset!'
  'alt-shift-cmd-H': 'unset!'

# NOTE: this is an ugly way to make sure specific command takes precedence
# in case of conflicting bindings across several packages
'.platform-darwin atom-workspace atom-text-editor':
  'ctrl-shift-M': 'markdown-preview:toggle'

'atom-text-editor':
  'ctrl-alt-cmd-/': 'unset!'
  'ctrl-?': 'unset!'

'atom-text-editor':
  'cmd-shift-/': 'block-comment:toggle'

'.platform-darwin':
  'cmd-s': 'window:save-all'

'.tree-view':
  'r': 'tree-view:rename'
